<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CI/CD on Atlas</title><link>https://www.javiercd.es/tags/ci/cd/</link><description>Recent content in CI/CD on Atlas</description><generator>Hugo -- gohugo.io</generator><language>es</language><lastBuildDate>Thu, 14 Mar 2024 10:00:00 +0000</lastBuildDate><atom:link href="https://www.javiercd.es/tags/ci/cd/index.xml" rel="self" type="application/rss+xml"/><item><title>Práctica CI/CD con Jenkins</title><link>https://www.javiercd.es/posts/ci_cd/practica_jenkins/practica_jenkins/</link><pubDate>Thu, 14 Mar 2024 10:00:00 +0000</pubDate><guid>https://www.javiercd.es/posts/ci_cd/practica_jenkins/practica_jenkins/</guid><description>El objetivo de esta práctica es el desarrollo gradual de un Pipeline que vaya realizando tareas sobre el repositorio de una aplicación.
La aplicación con la que vamos a trabajar será tu fork de la aplicación django Polls. Como hemos visto esta aplicación que implementa el tutorial de Django tiene implementado un módulo de pruebas.
Vamos a construir el Pipeline en varias fases:
Ejercicio 1: Construcción de una imagen docker Partimos del pipeline que hemos desarrollado en el Taller 3: Integración continua de aplicación django (Test), donde hemos automatizado el test de la aplicación.</description></item><item><title>Taller 1: Corrector ortográfico de documentos markdown (test)</title><link>https://www.javiercd.es/posts/ci_cd/taller1_jenkins/taller1/</link><pubDate>Thu, 14 Mar 2024 10:00:00 +0000</pubDate><guid>https://www.javiercd.es/posts/ci_cd/taller1_jenkins/taller1/</guid><description>Taller 1: Corrector ortográfico de documentos markdown (test) ¿Qué tienes que entregar? La URL del tu repositorio GitHub. https://github.com/javierasping/taller1_jenkins_ic-diccionario El contenido de la tu fichero Jenkinfile. pipeline { agent { docker { image &amp;#39;debian&amp;#39; args &amp;#39;-u root:root&amp;#39; } } stages { stage(&amp;#39;Clone&amp;#39;) { steps { git branch:&amp;#39;master&amp;#39;, url:&amp;#39;https://github.com/javierasping/taller1_jenkins_ic-diccionario.git&amp;#39; } } stage(&amp;#39;Install&amp;#39;) { steps { sh &amp;#39;apt-get update &amp;amp;&amp;amp; apt-get install -y aspell-es &amp;#39; } } stage(&amp;#39;Test&amp;#39;) { steps { sh &amp;#39;&amp;#39;&amp;#39; export LC_ALL=C.</description></item><item><title>Taller 2 Comprobación de HTML5 válido y despliegue en surge.sh (test y deploy)</title><link>https://www.javiercd.es/posts/ci_cd/taller2_jenkins/taller2/</link><pubDate>Thu, 14 Mar 2024 10:00:00 +0000</pubDate><guid>https://www.javiercd.es/posts/ci_cd/taller2_jenkins/taller2/</guid><description>En este ejercicio queremos desplegar una página HTML5 en el servicio surge.sh, además queremos comprobar si el código HTML5 es válido. Estas dos operaciones: comprobar si el HTML5 es válido (test) y el despliegue en surge.sh (deploy) lo vamos a hacer con Jenkins de forma automática (IC y DC). Recuerda que el repositorio es https://github.com/josedom24/ic-html5.
Como vimos en el ejemplo 2, para hacer el despliegue necesitamos guardar el token que hemos obtenido de surge para que nos autentifiquemos.</description></item><item><title>Taller 3: Integración continua de aplicación django (Test)</title><link>https://www.javiercd.es/posts/ci_cd/taller3_jenkins/taller3/</link><pubDate>Thu, 14 Mar 2024 10:00:00 +0000</pubDate><guid>https://www.javiercd.es/posts/ci_cd/taller3_jenkins/taller3/</guid><description>Vamos a trabajar con el repositorio de la aplicación django_tutorial. Esta aplicación tiene definidas una serie de test, que podemos estudiar en el fichero tests.py del directorio polls.
Cada test viene definido por una función. En el fichero puedes leer los comentarios para saber que es lo que prueba cada test, o puedes ver el documento Tests en la aplicación tutorial Django.
Para ejecutar los test ejecutamos:
python3 manage.py test En ese momento se crea una base de datos temporal, donde se van a ir realizando las pruebas que están definidas:</description></item></channel></rss>