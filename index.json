[{"categories":null,"contents":" Hello World A sample go program is show here.\npackage main import \u0026#34;fmt\u0026#34; func main() { message := greetMe(\u0026#34;world\u0026#34;) fmt.Println(message) } func greetMe(name string) string { return \u0026#34;Hello, \u0026#34; + name + \u0026#34;!\u0026#34; } Run the program as below:\n$ go run hello.go Variables Normal Declaration:\nvar msg string msg = \u0026#34;Hello\u0026#34; Shortcut:\nmsg := \u0026#34;Hello\u0026#34; Constants const Phi = 1.618 ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://hugo-toha.github.io/notes/go/basic/introduction/","summary":" Hello World A sample go program is show here.\npackage main import \u0026#34;fmt\u0026#34; func main() { message := greetMe(\u0026#34;world\u0026#34;) fmt.Println(message) } func greetMe(name string) string { return \u0026#34;Hello, \u0026#34; + name + \u0026#34;!\u0026#34; } Run the program as below:\n$ go run hello.go Variables Normal Declaration:\nvar msg string msg = \u0026#34;Hello\u0026#34; Shortcut:\nmsg := \u0026#34;Hello\u0026#34; Constants const Phi = 1.618 ","tags":null,"title":"Go পরিচিতি"},{"categories":null,"contents":"","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://hugo-toha.github.io/notes/go/basic/_index.bn/","summary":"","tags":null,"title":"Go বেসিক"},{"categories":null,"contents":"","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://hugo-toha.github.io/notes/go/advanced/_index.bn/","summary":"","tags":null,"title":"অ্যাডভান্সড"},{"categories":null,"contents":" Strings str := \u0026#34;Hello\u0026#34; Multiline string\nstr := `Multiline string` Numbers Typical types\nnum := 3 // int num := 3. // float64 num := 3 + 4i // complex128 num := byte(\u0026#39;a\u0026#39;) // byte (alias for uint8) Other Types\nvar u uint = 7 // uint (unsigned) var p float32 = 22.7 // 32-bit float Arrays // var numbers [5]int numbers := [...]int{0, 0, 0, 0, 0} Pointers func main () { b := *getPointer() fmt.Println(\u0026#34;Value is\u0026#34;, b) func getPointer () (myPointer *int) { a := 234 return \u0026amp;a a := new(int) *a = 234 Pointers point to a memory location of a variable. Go is fully garbage-collected.\nType Conversion i := 2 f := float64(i) u := uint(i) Slice slice := []int{2, 3, 4} slice := []byte(\u0026#34;Hello\u0026#34;) ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://hugo-toha.github.io/notes/go/basic/types/","summary":"Strings str := \u0026#34;Hello\u0026#34; Multiline string\nstr := `Multiline string` Numbers Typical types\nnum := 3 // int num := 3. // float64 num := 3 + 4i // complex128 num := byte(\u0026#39;a\u0026#39;) // byte (alias for uint8) Other Types\nvar u uint = 7 // uint (unsigned) var p float32 = 22.7 // 32-bit float Arrays // var numbers [5]int numbers := [...]int{0, 0, 0, 0, 0} Pointers func main () { b := *getPointer() fmt.","tags":null,"title":"বেসিক টাইপ সমূহ"},{"categories":null,"contents":" Condition if day == \u0026#34;sunday\u0026#34; || day == \u0026#34;saturday\u0026#34; { rest() } else if day == \u0026#34;monday\u0026#34; \u0026amp;\u0026amp; isTired() { groan() } else { work() } if _, err := doThing(); err != nil { fmt.Println(\u0026#34;Uh oh\u0026#34;) Switch switch day { case \u0026#34;sunday\u0026#34;: // cases don\u0026#39;t \u0026#34;fall through\u0026#34; by default! fallthrough case \u0026#34;saturday\u0026#34;: rest() default: work() } Loop for count := 0; count \u0026lt;= 10; count++ { fmt.Println(\u0026#34;My counter is at\u0026#34;, count) } entry := []string{\u0026#34;Jack\u0026#34;,\u0026#34;John\u0026#34;,\u0026#34;Jones\u0026#34;} for i, val := range entry { fmt.Printf(\u0026#34;At position %d, the character %s is present\\n\u0026#34;, i, val) n := 0 x := 42 for n != x { n := guess() } ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://hugo-toha.github.io/notes/go/basic/flow-control/","summary":"Condition if day == \u0026#34;sunday\u0026#34; || day == \u0026#34;saturday\u0026#34; { rest() } else if day == \u0026#34;monday\u0026#34; \u0026amp;\u0026amp; isTired() { groan() } else { work() } if _, err := doThing(); err != nil { fmt.Println(\u0026#34;Uh oh\u0026#34;) Switch switch day { case \u0026#34;sunday\u0026#34;: // cases don\u0026#39;t \u0026#34;fall through\u0026#34; by default! fallthrough case \u0026#34;saturday\u0026#34;: rest() default: work() } Loop for count := 0; count \u0026lt;= 10; count++ { fmt.Println(\u0026#34;My counter is at\u0026#34;, count) } entry := []string{\u0026#34;Jack\u0026#34;,\u0026#34;John\u0026#34;,\u0026#34;Jones\u0026#34;} for i, val := range entry { fmt.","tags":null,"title":"Flow Control"},{"categories":null,"contents":" Condition if day == \u0026#34;sunday\u0026#34; || day == \u0026#34;saturday\u0026#34; { rest() } else if day == \u0026#34;monday\u0026#34; \u0026amp;\u0026amp; isTired() { groan() } else { work() } if _, err := doThing(); err != nil { fmt.Println(\u0026#34;Uh oh\u0026#34;) ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://hugo-toha.github.io/notes/go/advanced/files/","summary":" Condition if day == \u0026#34;sunday\u0026#34; || day == \u0026#34;saturday\u0026#34; { rest() } else if day == \u0026#34;monday\u0026#34; \u0026amp;\u0026amp; isTired() { groan() } else { work() } if _, err := doThing(); err != nil { fmt.Println(\u0026#34;Uh oh\u0026#34;) ","tags":null,"title":"ফাইল ম্যানিপুলেশন"},{"categories":null,"contents":" Variable NAME=\u0026#34;John\u0026#34; echo $NAME echo \u0026#34;$NAME\u0026#34; echo \u0026#34;${NAME} Condition if [[ -z \u0026#34;$string\u0026#34; ]]; then echo \u0026#34;String is empty\u0026#34; elif [[ -n \u0026#34;$string\u0026#34; ]]; then echo \u0026#34;String is not empty\u0026#34; fi ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://hugo-toha.github.io/notes/bash/basic/","summary":" Variable NAME=\u0026#34;John\u0026#34; echo $NAME echo \u0026#34;$NAME\u0026#34; echo \u0026#34;${NAME} Condition if [[ -z \u0026#34;$string\u0026#34; ]]; then echo \u0026#34;String is empty\u0026#34; elif [[ -n \u0026#34;$string\u0026#34; ]]; then echo \u0026#34;String is not empty\u0026#34; fi ","tags":null,"title":"ব্যাশ ভেরিয়েবল"},{"categories":null,"contents":"","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://hugo-toha.github.io/notes/_index.bn/","summary":"","tags":null,"title":"নোট সমূহ"},{"categories":null,"contents":"FRANCISCO JAVIER CRUCES DOVAL PLANIFICACIÓN Y ADMINISTRACIÓN DE REDES\nINSTALACIÓN DE WIRESHARK Y GNS3\nÍndice\n1.Instalación de wireshark en Debian 11\nIntroducción Descarga del paquete en debían Comprobación de funcionamiento Componentes de wireshark generales 2.Instalación de GNS3 en Debian 11\nIntroducción Instalación en debian Nuestra primera topología en GNS3 Acceso a internet a través de NAT en GNS3 3.Problemas comunes en la instalación\nError VPCS executable version must be \u0026gt;=0.6.1 but not 0.8 Xterm no instalado 4 Instalar imágenes IOS\n5.Instalación en Windows de GNS3\nPaquetes necesarios para Windows Requisitos mínimos Instalación GNS3 Prueba de funcionamiento 6.Instalación Wireshark en Windows\nInstalación Prueba de funcionamiento 7.GNS VM\nConclusión\nBibliografía\n1.Instalación de wireshark en Debian 11\nIntroducción Wireshark es un analizador de protocolos utilizado para realizar análisis y solucionar problemas en redes de comunicaciones, para análisis de datos y protocolos, y como una herramienta didáctica.\nAñade una interfaz gráfica y muchas opciones de organización y filtrado de información. Así, permite ver todo el tráfico que pasa a través de una red estableciendo la configuración en modo promiscuo de nuestra tarjeta de red . También incluye una versión basada en texto llamada tshark.\nPermite examinar datos o de un archivo de captura salvado en disco. Se puede analizar la información capturada, a través de los detalles y sumarios por cada paquete. Wireshark incluye un completo lenguaje para filtrar lo que queremos ver y la habilidad de mostrar el flujo reconstruido de una sesión de TCP.\nWireshark es software libre, y se ejecuta sobre la mayoría de sistemas operativos Unix y compatibles.\nLos requisitos mínimos para utilizar este software son :\nCualquier procesador moderno AMD64/x86-64 de 64 bits o x86 de 32 bits. 500 MB de RAM disponibles. Los archivos de captura más grandes requieren más RAM. 500 MB de espacio disponible en disco. Los archivos de captura requieren espacio en disco adicional. Cualquier pantalla moderna. Se recomienda una resolución de 1280 × 1024 o superior. Wireshark utilizará resoluciones HiDPI o Retina si están disponibles. Los usuarios avanzados encontrarán útiles varios monitores. Una tarjeta de red compatible para capturar Descarga del paquete en debían Para descargar el paquete en nuestro equipo deberemos de mirar en la pagina oficial de descargas si incluye soporte para nuestro sistema operativo .\nVemos que no aparece en la lista ningún sistema operativo GNU/Linux , esto es porque Wireshark está disponible a través del sistema de empaquetado predeterminado en la mayoría de estas plataformas . Es decir esta presente en los repositorios de nuestra distribución , en el caso de que no estuviese tenemos el código fuente al ser un software libre y podríamos compilarlo .\nPodemos comprobar si esta disponible en nuestro sistema operativo visitando la pagina oficial :\nVemos que Debian aparece en la lista esto quiere decir que el paquete esta en los repositorios oficiales de debían.\nEn Debian contamos con el gestor de paquetes apt , así que podemos comprobar la versión del paquete disponible para la instalación y comprobar desde que repositorios se nos descargara con el siguiente comando :\nPara realizar la instalación de wireshark introduciremos el siguiente comando :\nA continuación para hacer capturas de red en el equipo necesitaremos permisos para nuestro usuario para ello , utilizaremos el siguiente comando :\nComprobación de funcionamiento Ahora abriremos el programa para comprobar que todo funciona correctamente :\nAhora iniciaremos una captura de paquetes para ello si queremos hacerla sobre un interfaz en concreta pulsamos sobre ella , en mi caso usare la tarjeta de red inalámbrica wlo1 y haré una petición web a\nla pagina jagger.es .\nAquí te muestro la petición DNS que ha viajado desde mi portátil hasta el router .\nComponentes de wireshark generales Wireshark hace uso de unos determinados paquetes : Wireshark : el analizador de protocolos de red que todos conocemos . TShark : un analizador de protocolo de red de línea de comandos. Complementos y extensiones : extras para los motores de disección Wireshark y TShark Complementos Dissector : complementos con algunas disecciones extendidas. Complementos de estadísticas de árbol -:Estadísticas extendidas. Mate: motor de seguimiento y meta análisis : extensiones configurables por el usuario del motor de filtro de pantalla; consulte el Capítulo 12, MATE para obtener más detalles. MIB de SNMP: MIB de SNMP para una disección de SNMP más detallada. Herramientas : herramientas de línea de comandos adicionales para trabajar con archivos de captura Editcap : lee un archivo de captura y escribe algunos o todos los paquetes en otro archivo de captura. Text2Pcap : lee un volcado hexadecimal ASCII y escribe los datos en un archivo de captura pcap. Reordercap : reordena un archivo de captura por marca de tiempo. Mergecap : combina varios archivos de captura guardados en un único archivo de salida. Capinfos : proporciona información sobre los archivos de captura. Rawshark : filtro de paquetes sin procesar. Guía del usuario : instalación local de la Guía del usuario. Los botones de Ayuda en la mayoría de los cuadros de diálogo requerirán una conexión a Internet para mostrar las páginas de ayuda si la Guía del usuario no está instalada localmente. 2.Instalación de GNS3 en Debian 11\nIntroducción GNS3 es un simulador gráfico de red lanzado en 2008, que te permite diseñar topologías de red complejas y poner en marcha simulaciones sobre ellos,permitiendo la combinación de dispositivos tanto reales como virtuales.\nPara permitir completar simulaciones, GNS3 está estrechamente vinculada con:\nDynamips: un emulador de IOS que permite a los usuarios ejecutar imágenes de IOS . Dynagen: un front-end basado en texto para Dynamips . Qemu y VirtualBox: para permitir utilizar máquinas virtuales como un firewall PIX o estaciones de trabajo . VPCS: un emulador de PC con funciones básicas de networking . IOU: (IOS en Unix), compilaciones especiales de IOS provistas por Cisco para correr directamente en sistemas UNIX y derivados . Los requisitos mínimos para hacer uso de esta herramienta son :\nProcesador : 2 o más núcleos lógicos Virtualización: Se requieren extensiones de virtualización. Es posible que deba habilitar esto a través del BIOS de su computadora. Memoria RAM: 4 GB de RAM Almacenamiento : 1 GB de espacio disponible (la instalación de Windows es \u0026lt; 200 MB). Notas adicionales : Es posible que necesite almacenamiento adicional para su sistema operativo y las imágenes del dispositivo. Instalación en debian Lo primero que haremos antes de instalar sera comprobar que nuestro sistema este actualizado , para ello haremos un apt update y si tenemos paquetes desactualizados haremos un apt upgrade .\nA continuación instalaremos todas las dependencias que necesita GNS3 :\nAhora te describiré la función de los paquetes que vamos a instalar :\nPaquete Descripción python3-pip El módulo pip es el instalador de paquetes de Python. python3-pyqt5 El módulo PyQt5 expone la API de Qt5 a Python 3 . python3-pyqt5.qtsvg El módulo SVG de PyQt5 proporciona clases para mostrar el contenido de los archivos SVG. python3-pyqt5.qtwebsockets El módulo WebSockets de PyQt5 proporciona enlaces de Python 3 para la especificación WebSockets (tanto cliente como servidor). qemu Software de Virtualización , actualmente se encuentra dividido en varios paquetes . qemu-kvm Binarios de emulación de sistema completo QEMU . qemu-utils Binario de utilidades de emulación de QEMU . libvirt-clients Libvirt es un conjunto de herramientas en C para interactuar con las capacidades de virtualización de versiones recientes de Linux . libvirt-daemon-system Este paquete contiene los archivos de configuración para ejecutar el demonio libvirt como un servicio del sistema. Virtinst Este paquete contiene algunas utilidades de línea de comandos para crear y editar máquinas virtuales . wireshark Es un analizador de red que captura paquetes para su posterior análisis . xtightvncviewer Sistema de visualización remota que le permite ver un entorno de \u0026rsquo;escritorio\u0026rsquo; no solo en la máquina donde se está ejecutando, sino desde cualquier lugar en Internet . apt-transport-https Este es un paquete de transición ficticio: la compatibilidad con https . ca-certificates Contiene los certificados de las autoridades certificadoras que se incluyen en el navegador de Mozilla para permitir que las aplicaciones basadas en SSL . curl curl es una herramienta de línea de comandos para transferir datos con sintaxis URL . gnupg2 Se puede utilizar para cifrar datos y crear firmas digitales. Incluye una función avanzada de administración de claves y cumple con el estándar de Internet OpenPGP propuesto. software-properties-common Le permite administrar fácilmente su distribución y las fuentes de software de proveedores de software independientes. Una vez instalados estos paquetes , nos descargaremos GNS3 utilizando pip3 :\nAdemás nos fijaremos en la salida del comando para comprobar si hay algún error :\nLo siguiente sera instalar docker , el cual nos permitirá crear contenedores . Para ello importaremos su clave GPG para que nuestro sistema confié en el :\nLo siguiente sera añadir el repositorio a nuestro sistema para ello utilizaremos el siguiente comando:\nActualizaremos los repositorios que utiliza apt haciendo un apt update :\nY finalmente podremos instalar docker :\nAgregue las siguientes líneas a su /etc/apt/sources.list , para que podamos instalar dynamips y ubridge:\nPara poder instalar los paquetes necesarios de estos repositorios , añadiremos las claves gpg del mismo :\nActualizaremos los repositorios que utiliza apt haciendo un apt update :\nNos instalaremos los paquetes Dynamips y ubridge :\nSaldrá un recuadro como este , para indicar si los usuarios que no son superusuarios pueden capturar paquetes , le diremos que si en nuestro caso :\nPara evitar la instalación accidental de cualquier otra cosa de ese repositorio (por ahora), elimine o comente esas dos líneas en su archivo /etc/apt/sources.list y haga un apt update:\nTambién podemos eliminar la clave GPG de estos repositorios si lo deseamos :\nAñadiremos a los usuarios que vayan a utilizar la herramienta a los siguientes grupos :\nReinicie su sesión de usuario cerrando sesión y volviendo a iniciarla, o reiniciando el sistema para que se apliquen estos cambios .\nNuestra primera topología en GNS3 Una vez reiniciado el sistema iniciaremos la aplicación , y nos saldrá un recuadro como este :\nAquí indicaremos que voy a correr las aplicaciones localmente en mi maquina .A continuación seleccionaremos la ruta del servidor , el nombre de host y el puerto asociado :\nSi todo ha sido correcto , nos dirá que se ha realizado correctamente :\nCuando abramos el programa , nos dará opción a crear un proyecto o podemos crear uno nuevo , en mi caso creare uno :\nSi nos fijamos en la parte izquierda del programa veremos los siguientes símbolos que sirven para lo siguiente :\nAñadiremos arrastrando 2 VPCS :\nLe añadiremos un Ethernet swicht :\nHaremos clic en el botón Agregar un enlace para dejar de agregar enlaces , nos quedaría así el escenario :\nPodemos hacer visible la interfaz a la cual los hemos conectado pulsando en el siguiente botón :\nEl botón verde \u0026ldquo;Reproducir\u0026rdquo; en la barra de herramientas GNS3 encenderá todos los dispositivos en la topología, mientras que el botón amarillo \u0026ldquo;Pausa\u0026rdquo; los suspenderá y el botón rojo \u0026ldquo;Detener\u0026rdquo; apagará todo en la topología:\nNos saldrá una advertencia , para que confirmemos si queremos añadir todos los dispositivos , le daremos a si :\nVeremos que tanto a la izquierda en el resumen de dispositivos como en las conexiones salientes de los dispositivos su “luz” de estado a cambiado de rojo a verde , puestos que estos ahora están encendidos :\nAhora abriremos una terminal en todos nuestros VPCS , con el siguiente botón :\nA través de estas terminales le asignaremos direcciones ips a nuestros dispositivos con el siguiente comando :\nUna vez configurada las tarjetas de red , comprobaremos si hay conectividad entre ellos haciendo un ping :\nAñadiremos un tercer VPCS a nuestro esquema :\nLo encenderemos y abriremos una terminal para configurarlo al igual que hemos hecho con los anteriores :\nY comprobare que esta nueva maquina tiene conectividad con las anteriores :\nSi queremos que se guarden las configuraciones de nuestros equipos introduciremos el comando save :\nAcceso a internet a través de NAT en GNS3 La manera mas fácil de conseguir acceso a internet es a través de la nube NAT .\nEsta cuenta con acceso a internet , así como un servicio DHCP corriendo con IPV4 .Para hacer uso de ella , la pondremos en nuestro escenario y la conectaremos en un swicht .\nA continuación si queremos salir a internet , tendremos que configurar nuestros clientes para que estos obtengan la configuración de red adecuada . Aprovecharemos que tenemos un servidor DHCP .\nPara que los clientes se configuren a través de este servicio introduciremos el comando dhcp :\nProbaremos a hacer un ping a google.es para comprobar la conectividad :\n3.Problemas comunes en la instalación\nError VPCS executable version must be \u0026gt;=0.6.1 but not 0.8 Este error viene al hacer la instalación de los VPCS , se descarga de los repositorios una versión que no admite actualmente el programa .\nPor suerte es muy fácil de solucionar , accederemos al repositorio del desarrollador en github y nos descargaremos el siguiente paquete :\nUna vez descargado lo descomprimiremos usando el siguiente comando :\nDonde hagamos este comando nos creara un directorio en el cual accederemos para compilar el programa :\nEjecutaremos el siguiente script :\nNos creara en esta ruta el directorio vpcs , este tendremos que añadirlo en gns3 :\nAccederemos a gns3 , pulsaremos CTRL + SHIFT + P para acceder al panel de preferencias . Una vez aquí nos desplazamos al apartado de las vpcs y seleccionamos la ruta del directorio que acabamos de generar :\nAplicamos los cambios y ya podríamos utilizar las vpcs .\nXterm no instalado Este error aparece cuando queremos acceder a una consola de un dispositivo de nuestra tipología de red .Para solucionar este problema lo primero es cerrar GNS3 y a continuación dirigirnos a una terminal para descargarlo, utilizaremos el siguiente comando :\nVolveremos a abrir el programa y podremos acceder a las consolas de nuestras maquinas .\n4 Instalar imágenes IOS\nSi queremos añadir a nuestro sistema hardware real como puede ser un router cisco por ejemplo deberemos de acceder a la pagina oficial de GNS3 y descargar concretamente el que deseemos añadir en mi caso añadiré un cisco 3725 .\nSi pulsamos sobre el botón de descarga nos descargara un archivo con extensión , el cual es una plantilla .\nSi nos fijamos en este caso no tenemos la posibilidad de descargar la imagen desde este repositorio , nos dice que no hay link disponible . Para estos casos existe un repositorio de cisco el cual tiene todas las imágenes de sus productos –\u0026gt; tfr.org/cisco-ios\nPara saber cual nos tenemos que traer de aquí , abriremos gns3 y a través del menú superior izquierdo pulsaremos sobre el apartado file \u0026gt; import appilance , seleccionaremos la plantilla que vamos a importar . Le daremos a instalar en nuestro ordenador local :\nUna vez aquí nos , veremos el nombre del archivo y lo buscaremos en el repositorio externo , ya que podemos observar que no se encuentra el archivo\nEn este caso descargare , esta version que coincide con la plantilla que he descargado :\nCuando hayamos hecho esto tendremos el siguiente problema , las firmas de las imágenes no coincidirán para paliar ese paso marcaremos la opción allow custom files en la parte inferior y importaremos el binario que acabamos de descargar :\nNos informara que para la plantilla seleccionada , el archivo que hemos descargado del repositorio no coinciden los hashes . En nuestro caso es normal ya que la imagen no es la misma que tendría que venir con la plantilla , así que aceptaremos los riesgos .\nVeremos que cambiara el estado a listo para instalar , así que le daremos a siguiente en la parte inferior .\nNos pedirá confirmación para añadir nuestro dispositivo , confirmaremos la acción :\nNos informara de que nuestro dispositivo se ha añadido en las plantillas de los router , para este caso .\nAdemás nos informara del nombre que se le ha asignado .\nComo nos indico , lo encontraremos en la sección de routers :\nAhora haremos una pequeña prueba de funcionamiento , lo añadiremos a nuestro escenario y comprobaremos que podemos arrancarlo y conectarnos a la consola :\nVeremos la conexión a la consola es correcta :\n5.Instalación en Windows de GNS3\nPaquetes necesarios para Windows Aunque tengamos instalado el software de GNS3 este hará uso de paquetes adicionales para realizar algunas funciones o incluso añadir nuevas funcionalidades como emular enrutadores de determinados fabricantes .\nArtículo Requerido Descripción WinPCAP Requerido Requerido para conectar GNS3 a su red informática. Utilizado por los nodos Cloud y NAT para permitir que sus proyectos se comuniquen con el mundo exterior. Npcap Opcional El reemplazo moderno de WinPCAP sabe solucionar problemas pero está menos probado que WinPCAP.Instale Npcap con la opción \u0026ldquo;Modo compatible con la API de WinPcap\u0026rdquo; seleccionada, si se usa sin WinPcap.Npcap puede coexistir con WinPcap, si esa opción no está seleccionada. Wireshark Recomendado Le permite capturar y ver el tráfico de red enviado entre nodos. Dynamips Requerido Requerido para ejecutar una instalación local de GNS3 con enrutadores Cisco. QEMU 3.1.0 y 0.11.0 Opcional Un software de virtualización .La versión anterior de Qemu 0.11.0 está instalada para admitir dispositivos ASA antiguos. Se recomienda utilizar la vm GNS3 en su lugar.\nVPCS Recomendado Un emulador de PC muy ligero que admite comandos básicos como ping y traceroute Cpulimit Opcional Se usa para evitar que QEMU use el 100% de su CPU (cuando se está ejecutando) en algunos casos, como con los dispositivos ASA antiguos GNS3 Requerido El software principal de GNS3.Esto siempre es obligatorio. Visor TightVNC Recomendado Un cliente VNC utilizado para conectarse a las interfaces gráficas de usuario del dispositivo. Solar-Putty Recomendado La nueva aplicación de consola predeterminada. Virt-viewer Recomendado Visualizador alternativo de máquinas virtuales de escritorio Qemu que tienen qemu-spice preinstalado. Intel Hardware Acceleration Manager (HAXM) Opcional Solo disponible en sistemas con CPU Intel (y VT-X habilitado), que no usan Hyper-V. Se utiliza para la aceleración de hardware de la emulación de Android, así como para QEMU. Requisitos mínimos Para entornos pequeños en Windows los desarrolladores exigen tener como mínimo las siguientes características :\nCaracterísticas Requisitos Sistema operativo Windows 7 (64 bits) o posterior Procesador 2 o más núcleos lógicos Virtualización Se requieren extensiones de virtualización. Es posible que deba habilitar esto a través del BIOS de su ordenador . Memoria 4 GB de RAM Almacenamiento 1 GB de espacio disponible (la instalación de Windows es \u0026lt; 200 MB). Instalación GNS3 Lo primero que tendremos que sera descargarnos el ejecutable oficial de su pagina web , para ello tendremos que estar registrados previamente .\nLanzaremos el ejecutable y nos pedirá permisos de administrados , se los concedemos :\nSaldrá una pantalla informándonos sobre el producto , le damos a next .\nA continuación deberemos de aceptar los términos y licencias de uso :\nNos preguntara donde queremos crear los atajos del programa , lo dejare por defecto ya que asi los añadirá al escritorio :\nA continuación debemos de prestar atención ya que debemos de seleccionar instalación local y todos los paquetes que vayamos a hacer uso , si hubiésemos instalado antes alguno de ellos los desmarcamos (Los mencionados en el punto 5.1) :\nSeleccionaremos la ruta donde se instalara el programa , yo dejare la predeterminada . También nos informa el espacio que necesitara la instalación :\nEsperaremos a que se realice la instalación :\nInstalación WinCap\nRequerido para conectar GNS3 a su red informática. Utilizado por los nodos Cloud y NAT para permitir que sus proyectos se comuniquen con el mundo exterior.\nMientras se realiza la instalación de GNS3 comenzara la instalación de todos los programas que hemos marcado anteriormente .\nNos mostrara información sobre el programa esta primera ventana así que le damos a siguiente :\nAceptamos la licencia de términos y uso :\nMarcamos la opción para que arranque automáticamente el driver y le damos a instalar\nNos informa de que la instalación a sido correcta y cerramos la ventana :\nInstalación Ncap\nEl reemplazo moderno de WinPCAP sabe solucionar problemas pero está menos probado que WinPCAP.Instale Npcap con la opción \u0026ldquo;Modo compatible con la API de WinPcap\u0026rdquo; seleccionada, si se usa sin WinPcap.Npcap puede coexistir con WinPcap, si esa opción no está seleccionada.\nOtra vez el mismo proceso , aceptamos los términos y licencias de uso .\nDejamos la opción marcada por defecto y le damos a install\nCuando finalice la instalación le damos a siguiente :\nY cerramos el instalador :\nVolvemos a GNS3 ya que el proceso de instalación ha quedado detenido mientras hemos instalado los componentes que va a hacer uso , esta se reanuda automáticamente :\nUna vez finalice la instalación , le damos a siguiente\nGNS3 nos ofrece una licencia gratuita de Solarwinds , le daremos a si :\nHabremos finalizado correctamente la instalación de GNS3\nAbriremos el programa y seleccionaremos correr los dispositivos en nuestra maquina local :\nAquí configuraremos nuestro servidor local de GNS3\nAnteriormente lo deje por defecto , si nuestra configuración es correcta nos dirá que la conexión se ha realizado satisfactoriamente :\nNos mostrara un resumen de la configuración dada anteriormente :\nPrueba de funcionamiento Montaremos el mismo escenario que en debian para comprobar su funcionamiento , el proceso es el mismo .\nConfiguraremos las direcciones ips de las maquinas y comprobamos que tengan conectividad a través de solarputty .\nPC1 :\nPC2:\nPodemos observar que ambos equipos tienen conectividad a través del escenario .\n6.Instalación Wireshark en Windows\nInstalación La instalación de este producto es muy sencilla , si hemos instalado GNS3 anteriormente y hemos marcado la casilla de este , se nos habrá instalado automáticamente .\nPor el contrario si partimos desde cero podemos hacer su instalación , bajandonoslo de su sitio web oficial :\nCuando abramos el instalador nos pedirá permisos de administrador , se lo concedemos :\nSi al igual que yo lo has instalado con GNS3 nos detectara que ya existe una instalaron , así que yo la cancelare .\nSi no lo tuviésemos la instalación es idéntica a cualquier programa que hemos instalado en la practica . Aquí te lo muestro , lo primero que veras sera una pantalla informativa del ejecutable :\nAl igual que todos los programas te pedirá que aceptes los términos y condiciones de uso :\nSeleccionaremos los productos que deseemos instalar en mi caso todos :\nAdemás nos preguntara que accesos directos y donde los queremos crear\nSeleccionaremos la ruta donde queremos que se instale :\nSeleccionaremos si nos interesa el paquete Ncap .(Lo hemos instalado con GNS3)\nA continuación nos preguntara para instalar la extensión que nos permite analizar trafico USB , en mi caso la desmarcare ya que no me interesa .\nEsperaremos a que finalice la instalación y le daremos a siguiente :\nNos informara de que la instalación ha sido realizada correctamente :\nPrueba de funcionamiento He realizado una petición DNS a www.sevillafc.es y aquí podemos ver la consulta DNS :\n7.GNS VM\nSi queremos desplegar maquinas virtuales en una instancia virtual desplegaremos la maquina virtual que nos da GNS3 para que este lleve la carga de la Virtualización .\nNos descargaremos la OVA desde la pagina web oficial\nUna vez descargada la importaremos en Vmware y le daremos las características hardware que consideremos oportuno :\nUna vez echo esto abriremos GNS3 y editaremos las preferencias de GNS VM y seleccionaremos la maquina virtual que acabamos de importar :\nSe nos iniciara la maquina virtual y podremos ver los datos de la misma en la pestaña info :\nLanzaremos el set-up wizard desde la pestaña help de GNS3 y seleccionaremos la opción de ejecutar las apilances en una maquina virtual :\nSeleccionaremos la configuración de nuestra maquina virtual :\nSeleccionaremos de nuevo nuestra maquina virtual y las características hardware que deseemos :\nSolo nos quedara importar los dispositivos en la maquina virtual , esto se hace igual que hemos echo anteriormente cambiando el sitio donde lo importamos :\nSi queremos ver donde se ejecutara un dispositivo podemos verlo a través de preferencias :\nAdemás podemos ver en apartado servers sumarry el consumo de recursos de nuestras maquinas :\nConclusión\nPodemos ver que la instalación es infinitamente mas cómoda en Windows ya que automáticamente te instala las dependencias, siendo la típica instalación de “siguiente a siguiente ” .\nAdemás en Windows al acabar la instalación el producto estaba listo para usarse y no he sufrido ningún error al iniciar el programa ni al usar sus características como si me ha pasado en Debian .\nBibliografía\nDocumentacion oficial wireshark\nPaquete wireshark en debian\nRequisitos mínimos wireshark\nError “VPCS executable version must be \u0026gt;=0.6.1 but not 0.8” Descarga VPCS 53\n","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://hugo-toha.github.io/posts/redes/pr%C3%A1ctica-3-instalaci%C3%B3n-de-wireshark-y-gns3/pr%C3%A1ctica-3-instalaci%C3%B3n-de-wireshark-y-gns3/","summary":"FRANCISCO JAVIER CRUCES DOVAL PLANIFICACIÓN Y ADMINISTRACIÓN DE REDES\nINSTALACIÓN DE WIRESHARK Y GNS3\nÍndice\n1.Instalación de wireshark en Debian 11\nIntroducción Descarga del paquete en debían Comprobación de funcionamiento Componentes de wireshark generales 2.Instalación de GNS3 en Debian 11\nIntroducción Instalación en debian Nuestra primera topología en GNS3 Acceso a internet a través de NAT en GNS3 3.Problemas comunes en la instalación\nError VPCS executable version must be \u0026gt;=0.6.1 but not 0.","tags":null,"title":""},{"categories":null,"contents":"Go Notes ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://hugo-toha.github.io/notes/go/_index.bn/","summary":"Go Notes ","tags":null,"title":"Go এর নোট সমূহ"},{"categories":null,"contents":"Bash Notes ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://hugo-toha.github.io/notes/bash/_index.bn/","summary":"Bash Notes ","tags":null,"title":"ব্যাশের নোট সমূহ"}]