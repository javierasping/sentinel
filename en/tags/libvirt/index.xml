<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Libvirt on Atlas</title><link>https://www.javiercd.es/en/tags/libvirt/</link><description>Recent content in Libvirt on Atlas</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 25 Oct 2025 09:00:00 +0000</lastBuildDate><atom:link href="https://www.javiercd.es/en/tags/libvirt/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction to storage in KVM/libvirt</title><link>https://www.javiercd.es/en/posts/virtualizacion-kvm-linux/almacenamiento-kvm/introduccion-almacenamiento-kvm/introduccion-almacenamiento-kvm/</link><pubDate>Sat, 25 Oct 2025 09:00:00 +0000</pubDate><guid>https://www.javiercd.es/en/posts/virtualizacion-kvm-linux/almacenamiento-kvm/introduccion-almacenamiento-kvm/introduccion-almacenamiento-kvm/</guid><description>&lt;p&gt;Storage is a foundational part of virtualization: it determines how and where virtual machine disks are stored, how snapshots are handled, and what performance and protection options are available.&lt;/p&gt;
&lt;p&gt;In the KVM/libvirt ecosystem storage is organized around two basic concepts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Storage pools: logical groupings that represent a storage source (for example, a directory, an LVM volume group, an iSCSI target or a Ceph pool). Libvirt exposes and manages these pools to simplify storage usage for VMs.&lt;/li&gt;
&lt;li&gt;Storage volumes: the units inside a pool that act as virtual disks for guests.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="types-of-pools"&gt;Types of pools&lt;/h2&gt;
&lt;p&gt;Libvirt supports several pool types. A practical summary:&lt;/p&gt;</description></item><item><title>How to manage storage pools</title><link>https://www.javiercd.es/en/posts/virtualizacion-kvm-linux/almacenamiento-kvm/gestion-pools-almacenamiento/gestion-pools-almacenamiento/</link><pubDate>Sat, 25 Oct 2025 09:00:00 +0000</pubDate><guid>https://www.javiercd.es/en/posts/virtualizacion-kvm-linux/almacenamiento-kvm/gestion-pools-almacenamiento/gestion-pools-almacenamiento/</guid><description>&lt;p&gt;This post answers the following questions and provides practical examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What is a storage pool?&lt;/li&gt;
&lt;li&gt;How is a pool created and what forms can it take?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Storage in KVM/libvirt is organized using &amp;ldquo;storage pools&amp;rdquo; and &amp;ldquo;storage volumes&amp;rdquo;. In this article we explain what a pool is, why pools are used, and how to manage them with &lt;code&gt;virsh&lt;/code&gt; or XML definitions. We include examples, practical recommendations, and notes about LVM-based pools.&lt;/p&gt;</description></item><item><title>How to manage storage volumes with virsh</title><link>https://www.javiercd.es/en/posts/virtualizacion-kvm-linux/almacenamiento-kvm/gestion-volumenes-virsh/gestion-volumenes-virsh/</link><pubDate>Sat, 25 Oct 2025 09:00:00 +0000</pubDate><guid>https://www.javiercd.es/en/posts/virtualizacion-kvm-linux/almacenamiento-kvm/gestion-volumenes-virsh/gestion-volumenes-virsh/</guid><description>&lt;p&gt;Short: examples of using the libvirt API (&lt;code&gt;virsh vol-*&lt;/code&gt;) to manage volumes inside storage pools and notes about backend-specific behavior.&lt;/p&gt;
&lt;h2 id="managing-storage-volumes-with-virsh"&gt;Managing storage volumes with virsh&lt;/h2&gt;
&lt;p&gt;In this section we&amp;rsquo;ll look at storage volume management using libvirt&amp;rsquo;s API (the &lt;code&gt;virsh&lt;/code&gt; tool). We will use pools of type &lt;code&gt;dir&lt;/code&gt; (image files on disk), although many operations are applicable to other backends; differences are noted where relevant.&lt;/p&gt;
&lt;h3 id="pools-and-volumes-quick-concept"&gt;Pools and volumes: quick concept&lt;/h3&gt;
&lt;p&gt;A &amp;ldquo;volume&amp;rdquo; in libvirt is the storage unit created inside a pool. In &lt;code&gt;dir&lt;/code&gt; and &lt;code&gt;fs&lt;/code&gt; pools volumes are files (for example &lt;code&gt;qcow2&lt;/code&gt;, &lt;code&gt;raw&lt;/code&gt;); in &lt;code&gt;logical&lt;/code&gt; pools they are LVM logical volumes; in &lt;code&gt;disk&lt;/code&gt; pools they can map to partitions; and in networked backends (Gluster, RBD, iSCSI) creation and management may require backend-specific tools.&lt;/p&gt;</description></item><item><title>How to resize virtual machine disks</title><link>https://www.javiercd.es/en/posts/virtualizacion-kvm-linux/almacenamiento-kvm/redimension-discos-vms/redimension-discos-vms/</link><pubDate>Sat, 25 Oct 2025 09:00:00 +0000</pubDate><guid>https://www.javiercd.es/en/posts/virtualizacion-kvm-linux/almacenamiento-kvm/redimension-discos-vms/redimension-discos-vms/</guid><description>&lt;p&gt;In this example we&amp;rsquo;ll use the &lt;code&gt;default&lt;/code&gt; pool and a volume named &lt;code&gt;vdisk-10G.qcow2&lt;/code&gt;. We&amp;rsquo;ll show how to create the volume from the host, how to format it with common filesystems (ext4, FAT32, XFS, btrfs) from inside the guest, and finally how to add 10 GB to the volume and resize the partition and filesystem.&lt;/p&gt;
&lt;p&gt;Note: commands that manage volumes (create, resize) run on the host and use your prompt. Commands executed inside the guest (partitioning and formatting) are shown with the guest prompt &lt;code&gt;javiercruces@debian13:~$&lt;/code&gt;.&lt;/p&gt;</description></item><item><title>Network types in KVM (NAT, isolated and bridged)</title><link>https://www.javiercd.es/en/posts/virtualizacion-kvm-linux/redes-kvm/tipos-redes-kvm/tipos-redes-kvm/</link><pubDate>Sat, 18 Oct 2025 09:00:00 +0000</pubDate><guid>https://www.javiercd.es/en/posts/virtualizacion-kvm-linux/redes-kvm/tipos-redes-kvm/tipos-redes-kvm/</guid><description>&lt;p&gt;In KVM, network virtualization is mainly managed through &lt;strong&gt;libvirt&lt;/strong&gt;, which lets us create and administer various kinds of virtual networks to which our virtual machines connect. Understanding the available network types is key to properly configuring guest connectivity and the host interaction.&lt;/p&gt;
&lt;p&gt;There are two broad categories of networks in KVM:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Private virtual networks&lt;/strong&gt;: Internal networks isolated from the outside, managed via virtual bridges created by libvirt.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bridged networks&lt;/strong&gt;: Networks that connect virtual machines directly to the host&amp;rsquo;s physical network.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id="private-virtual-networks"&gt;Private virtual networks&lt;/h2&gt;
&lt;p&gt;These networks are created on the host and provide a controlled environment for virtual machines. They fall into three main types:&lt;/p&gt;</description></item><item><title>How to create and configure private virtual networks</title><link>https://www.javiercd.es/en/posts/virtualizacion-kvm-linux/redes-kvm/crear-redes-virtuales-privadas-kvm/crear-redes-virtuales-privadas-kvm/</link><pubDate>Sat, 18 Oct 2025 09:00:00 +0000</pubDate><guid>https://www.javiercd.es/en/posts/virtualizacion-kvm-linux/redes-kvm/crear-redes-virtuales-privadas-kvm/crear-redes-virtuales-privadas-kvm/</guid><description>&lt;p&gt;In this step-by-step guide you&amp;rsquo;ll create three types of virtual networks managed by libvirt and learn simple ways to verify them:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NAT (Network Address Translation)&lt;/li&gt;
&lt;li&gt;Isolated&lt;/li&gt;
&lt;li&gt;Very isolated (L2 only)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We&amp;rsquo;ll use &lt;code&gt;virsh&lt;/code&gt; and XML definitions (you can do the same with &lt;code&gt;virt-manager&lt;/code&gt;, but we&amp;rsquo;ll focus on the CLI). After each creation, there&amp;rsquo;s a quick check to confirm everything looks good.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="before-you-start-quick-requirements"&gt;Before you start: quick requirements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Packages: &lt;code&gt;libvirt-daemon&lt;/code&gt; and &lt;code&gt;libvirt-daemon-system&lt;/code&gt; (or your distro equivalents). Optional: &lt;code&gt;virt-manager&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Run commands as root or with &lt;code&gt;sudo&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Service: &lt;code&gt;systemctl status libvirtd&lt;/code&gt; should be active.&lt;/li&gt;
&lt;li&gt;See current networks: &lt;code&gt;virsh net-list --all&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Persistent config paths: &lt;code&gt;/etc/libvirt/qemu/networks/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tip: avoid subnet conflicts; choose ranges that don&amp;rsquo;t collide with your physical LAN or other libvirt networks.&lt;/p&gt;</description></item><item><title>How to create a bridge interface on the KVM host</title><link>https://www.javiercd.es/en/posts/virtualizacion-kvm-linux/redes-kvm/crear-interfaz-puente/crear-interfaz-puente/</link><pubDate>Sat, 18 Oct 2025 09:00:00 +0000</pubDate><guid>https://www.javiercd.es/en/posts/virtualizacion-kvm-linux/redes-kvm/crear-interfaz-puente/crear-interfaz-puente/</guid><description>&lt;p&gt;A bridge on the host allows your virtual machines to connect directly to the physical network as if they were another machine on the LAN. It&amp;rsquo;s the basis for &amp;ldquo;bridged networks&amp;rdquo; covered in the network types section.&lt;/p&gt;
&lt;p&gt;Important: if you perform these changes over remote SSH you may lose connectivity. Whenever possible use local/console access or have a recovery plan (KVM/IPMI, a second interface, maintenance window, etc.).&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="0-preparation-identify-your-physical-interface-and-back-up-configs"&gt;0. Preparation: identify your physical interface and back up configs&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Identify the physical interface connected to your LAN/Internet (for example: &lt;code&gt;enp1s0&lt;/code&gt;, &lt;code&gt;enp3s0&lt;/code&gt;, &lt;code&gt;eth0&lt;/code&gt;):&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;ip -br link
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;ip -br addr
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start="2"&gt;
&lt;li&gt;Back up your network configuration files before changing anything — use the command appropriate to your setup:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo cp -a /etc/netplan /etc/netplan.bak.&lt;span style="color:#66d9ef"&gt;$(&lt;/span&gt;date +%F&lt;span style="color:#66d9ef"&gt;)&lt;/span&gt; 2&amp;gt;/dev/null
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo cp -a /etc/network/interfaces /etc/network/interfaces.bak.&lt;span style="color:#66d9ef"&gt;$(&lt;/span&gt;date +%F&lt;span style="color:#66d9ef"&gt;)&lt;/span&gt; 2&amp;gt;/dev/null
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start="3"&gt;
&lt;li&gt;Important note: the IP must live on the bridge (&lt;code&gt;br0&lt;/code&gt;), not on the physical interface. The physical interface will be left without an IP and become a slave of the bridge.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id="option-a-netplan-modern-ubuntudebian"&gt;Option A: Netplan (modern Ubuntu/Debian)&lt;/h2&gt;
&lt;p&gt;Applies to systems using Netplan (Ubuntu Server ≥ 18.04, Debian when migrated). The most common renderer is &lt;code&gt;networkd&lt;/code&gt;, but &lt;code&gt;NetworkManager&lt;/code&gt; can also be used. Here we configure &lt;code&gt;br0&lt;/code&gt; and enslave the physical interface to the bridge.&lt;/p&gt;</description></item><item><title>How to create a Debian 13 virtual machine template</title><link>https://www.javiercd.es/en/posts/virtualizacion-kvm-linux/gestion-maquinas-kvm/plantilla-debian13/plantilla-debian13/</link><pubDate>Sat, 18 Oct 2025 09:00:00 +0000</pubDate><guid>https://www.javiercd.es/en/posts/virtualizacion-kvm-linux/gestion-maquinas-kvm/plantilla-debian13/plantilla-debian13/</guid><description>&lt;p&gt;A virtual machine template is a preconfigured OS image that we use to quickly deploy new VMs, avoiding repetitions and errors. Here we&amp;rsquo;ll see how to create a Debian 13 master template ready for cloning.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="1-create-and-install-the-base-vm"&gt;1 Create and install the base VM&lt;/h2&gt;
&lt;p&gt;Create a clean Debian 13 VM, apply all updates and add the common software you want on all clones (guest agent, utilities, etc.). Minimal example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Create the base VM (adjust CPU, RAM, disk, ISO and network to your environment)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;virt-install &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --name debian13-base &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --memory &lt;span style="color:#ae81ff"&gt;4096&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --vcpus &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --disk path&lt;span style="color:#f92672"&gt;=&lt;/span&gt;/var/lib/libvirt/images/debian13-base.qcow2,size&lt;span style="color:#f92672"&gt;=&lt;/span&gt;20,format&lt;span style="color:#f92672"&gt;=&lt;/span&gt;qcow2 &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --cdrom /var/lib/libvirt/images/debian-13.1.0-amd64-netinst.iso &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --os-variant debian12 &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --network network&lt;span style="color:#f92672"&gt;=&lt;/span&gt;default,model&lt;span style="color:#f92672"&gt;=&lt;/span&gt;virtio &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --noautoconsole
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once the VM is created, install all the components you want this template to have: users, packages, etc.&lt;/p&gt;</description></item><item><title>How to create and manage snapshots in KVM</title><link>https://www.javiercd.es/en/posts/virtualizacion-kvm-linux/gestion-maquinas-kvm/snapshots-kvm/snapshots-kvm/</link><pubDate>Fri, 17 Oct 2025 10:00:00 +0000</pubDate><guid>https://www.javiercd.es/en/posts/virtualizacion-kvm-linux/gestion-maquinas-kvm/snapshots-kvm/snapshots-kvm/</guid><description>&lt;p&gt;Snapshots let you capture a VM&amp;rsquo;s state at a specific moment so you can roll back if something goes wrong (updates, risky changes, tests). In KVM with libvirt there are two main families:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Internal snapshots: the snapshot content is stored inside the qcow2 file itself. They usually require the VM to be powered off and only work with qcow2 storage (not raw, LVM, etc.).&lt;/li&gt;
&lt;li&gt;External snapshots: they create separate overlay files (qcow2); these are the most used for hot snapshots (running VM). They allow more flexible flows and can be consolidated later (blockcommit).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Additionally, a snapshot can be:&lt;/p&gt;</description></item><item><title>How to expand VM memory, CPU and disks</title><link>https://www.javiercd.es/en/posts/virtualizacion-kvm-linux/gestion-maquinas-kvm/ampliar-recursos-vm/ampliar-recursos-vm/</link><pubDate>Thu, 16 Oct 2025 13:00:00 +0000</pubDate><guid>https://www.javiercd.es/en/posts/virtualizacion-kvm-linux/gestion-maquinas-kvm/ampliar-recursos-vm/ampliar-recursos-vm/</guid><description>&lt;p&gt;In this article we&amp;rsquo;ll cover three practical cases for expanding resources in a VM managed with libvirt/KVM:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Increase the number of vCPUs (cores)&lt;/li&gt;
&lt;li&gt;Increase RAM memory&lt;/li&gt;
&lt;li&gt;Expand disk and filesystem inside the guest&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We&amp;rsquo;ll use &lt;code&gt;virsh&lt;/code&gt; commands, libguestfs tools where applicable, and standard utilities inside the guest (growpart, resize2fs, xfs_growfs, LVM). I&amp;rsquo;ll include &amp;ldquo;hot&amp;rdquo; methods when the system supports them and safe cold alternatives.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: To run without sudo, your user must belong to the &lt;code&gt;libvirt&lt;/code&gt; and &lt;code&gt;kvm&lt;/code&gt; groups.&lt;/p&gt;</description></item><item><title>Clone and rename virtual machines in KVM</title><link>https://www.javiercd.es/en/posts/virtualizacion-kvm-linux/gestion-maquinas-kvm/clonar-y-renombrar-vm/clonar-y-renombrar-vm/</link><pubDate>Thu, 16 Oct 2025 12:00:00 +0000</pubDate><guid>https://www.javiercd.es/en/posts/virtualizacion-kvm-linux/gestion-maquinas-kvm/clonar-y-renombrar-vm/clonar-y-renombrar-vm/</guid><description>&lt;p&gt;One of the advantages of virtualization is the ability to clone virtual machines to quickly create homogeneous environments. However, when we clone a VM that contains an operating system, the clone inherits unique identifiers such as the &lt;strong&gt;machine ID&lt;/strong&gt;, &lt;strong&gt;MAC&lt;/strong&gt; addresses, host &lt;strong&gt;SSH&lt;/strong&gt; keys, etc., which should be unique for each machine.&lt;/p&gt;
&lt;p&gt;In this guide we will cover how to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Clone virtual machines with &lt;code&gt;virt-clone&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Generalize clones with &lt;code&gt;virt-sysprep&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Customize new instances with &lt;code&gt;virt-customize&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Rename virtual machines with &lt;code&gt;virsh domrename&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Troubleshoot common issues after cloning&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id="prerequisites"&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;Make sure the following packages are installed:&lt;/p&gt;</description></item><item><title>How to manage virtual machines using virsh</title><link>https://www.javiercd.es/en/posts/virtualizacion-kvm-linux/gestion-maquinas-kvm/administrar-virsh/administrar-virsh/</link><pubDate>Thu, 16 Oct 2025 10:00:00 +0000</pubDate><guid>https://www.javiercd.es/en/posts/virtualizacion-kvm-linux/gestion-maquinas-kvm/administrar-virsh/administrar-virsh/</guid><description>&lt;p&gt;&lt;code&gt;virsh&lt;/code&gt; is a powerful command-line tool included in &lt;strong&gt;libvirt&lt;/strong&gt; that allows you to manage virtual machines and associated resources in &lt;strong&gt;KVM&lt;/strong&gt;.&lt;br&gt;
Through &lt;code&gt;virsh&lt;/code&gt;, you can create, start, stop, modify, and monitor domains (virtual machines), as well as manage networks, volumes, and storage pools.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="1-domain-virtual-machine-management"&gt;1. Domain (Virtual Machine) Management&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;virsh list --all&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Lists all virtual machines, both active and inactive.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;virsh start vm_name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Starts a previously defined virtual machine.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;virsh shutdown vm_name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Shuts down a virtual machine gracefully.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;virsh destroy vm_name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Stops a virtual machine immediately (similar to forcefully powering it off).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;virsh suspend vm_name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Suspends the execution of a virtual machine.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;virsh resume vm_name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Resumes a suspended machine.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;virsh reboot vm_name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Reboots the virtual machine.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;virsh reset vm_name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Resets a virtual machine as if the physical reset button was pressed.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;virsh autostart vm_name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Enables automatic startup of the VM when the host boots.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;virsh dominfo vm_name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Shows detailed information about the VM (state, UUID, CPU, memory, etc.).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;virsh dumpxml vm_name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Shows the complete XML definition of the VM.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;virsh edit vm_name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Opens the VM&amp;rsquo;s XML definition in an editor for modification.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;virsh undefine vm_name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Removes the VM definition without deleting its disk.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;virsh domrename old_name new_name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Changes the name of a virtual machine.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h2 id="2-information-and-monitoring"&gt;2. Information and Monitoring&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;virsh domstate vm_name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Shows the current state of a VM (&lt;code&gt;running&lt;/code&gt;, &lt;code&gt;shut off&lt;/code&gt;, etc.).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;virsh domstats vm_name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Shows real-time CPU, network, and disk statistics.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;virsh domblklist vm_name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Lists block devices (disks) associated with a VM.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;virsh domblkinfo vm_name vda&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Shows detailed information about a virtual disk.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;virsh domiflist vm_name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Shows network interfaces connected to the VM.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;virsh domifaddr vm_name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Shows IP addresses assigned to the VM&amp;rsquo;s network interfaces.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;virsh cpu-stats vm_name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Shows detailed CPU usage statistics for the VM.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;virsh dommemstat vm_name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Shows memory usage statistics for a VM.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;virsh console vm_name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Connects to the virtual machine&amp;rsquo;s text console.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;virsh vncdisplay vm_name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Shows the VNC port assigned to the VM for graphical access.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h2 id="3-storage"&gt;3. Storage&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;virsh pool-list&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Lists all storage pools.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;virsh pool-info pool_name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Shows detailed information about a pool.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;virsh pool-start pool_name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Starts a storage pool.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;virsh pool-destroy pool_name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Stops a storage pool.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;virsh pool-undefine pool_name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Removes the pool definition.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;virsh vol-list pool_name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Lists volumes (disks) within a pool.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;virsh vol-info --pool pool_name vol_name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Shows information about a volume.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;virsh vol-create-as pool_name vol_name 20G --format qcow2&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Creates a new 20 GB volume in QCOW2 format.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;virsh vol-delete --pool pool_name vol_name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Deletes a volume from a pool.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;virsh vol-clone --pool pool_name source_vol new_vol&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Clones an existing volume.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h2 id="4-virtual-networks"&gt;4. Virtual Networks&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;virsh net-list --all&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Lists all virtual networks, both active and inactive.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;virsh net-info net_name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Shows detailed information about a network.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;virsh net-start net_name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Starts a virtual network.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;virsh net-destroy net_name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Stops a virtual network.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;virsh net-autostart net_name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Enables automatic startup of a network.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;virsh net-edit net_name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Edits the XML configuration of a network.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;virsh net-dumpxml net_name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Shows the XML definition of a network.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;virsh net-update net_name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Updates network parameters without needing to restart it.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;virsh net-dhcp-leases net_name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Shows IP addresses delivered by DHCP on a network.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h2 id="5-snapshots-and-backups"&gt;5. Snapshots and Backups&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;virsh snapshot-list vm_name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Lists available snapshots for a VM.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;virsh snapshot-create-as vm_name snapshot_name &amp;quot;Description&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Creates a snapshot with name and description.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;virsh snapshot-revert vm_name snapshot_name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Reverts the VM to the state saved in a snapshot.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;virsh snapshot-delete vm_name snapshot_name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Deletes a specific snapshot.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;virsh backup-begin vm_name --target /backup/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Initiates a backup of the VM&amp;rsquo;s disks.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;virsh backup-dumpxml vm_name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Shows XML information about an ongoing backup task.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h2 id="6-migration-and-state-saving"&gt;6. Migration and State Saving&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;virsh save vm_name /ruta/estado.save&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Saves the current state of a VM to a file.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;virsh restore /ruta/estado.save&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Restores a VM from a saved file.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;virsh migrate --live vm_name qemu+ssh://host_destino/system&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Migrates a running VM to another host via SSH.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h2 id="7-host-and-hypervisor-information"&gt;7. Host and Hypervisor Information&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;virsh nodeinfo&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Shows information about the host&amp;rsquo;s CPU, memory, and architecture.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;virsh capabilities&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Shows the hypervisor&amp;rsquo;s capabilities (CPU, virtualization, etc.).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;virsh domcapabilities&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Shows capabilities supported by VMs.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;virsh version&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Shows the version of libvirt and the hypervisor.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;virsh hostname&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Shows the hostname running libvirt.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;virsh uri&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Shows the connection URI to the hypervisor.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h2 id="8-additional-tips"&gt;8. Additional Tips&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;To run commands without privileges, you can use &lt;code&gt;--connect qemu:///session&lt;/code&gt; or adding your user to the group kvm and libvirt.&lt;/li&gt;
&lt;li&gt;If managing system VMs, use &lt;code&gt;sudo virsh --connect qemu:///system&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;virsh help &amp;lt;section&amp;gt;&lt;/code&gt; to see all available commands in a group (for example, &lt;code&gt;virsh help domain&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;All changes made via &lt;code&gt;virsh edit&lt;/code&gt; are saved directly to the configuration XML files in &lt;code&gt;/etc/libvirt/qemu/&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;</description></item></channel></rss>