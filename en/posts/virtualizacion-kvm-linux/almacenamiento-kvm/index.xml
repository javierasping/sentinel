<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Storage in KVM on Atlas</title><link>https://www.javiercd.es/en/posts/virtualizacion-kvm-linux/almacenamiento-kvm/</link><description>Recent content in Storage in KVM on Atlas</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 25 Oct 2025 09:00:00 +0000</lastBuildDate><atom:link href="https://www.javiercd.es/en/posts/virtualizacion-kvm-linux/almacenamiento-kvm/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction to storage in KVM/libvirt</title><link>https://www.javiercd.es/en/posts/virtualizacion-kvm-linux/almacenamiento-kvm/introduccion-almacenamiento-kvm/introduccion-almacenamiento-kvm/</link><pubDate>Sat, 25 Oct 2025 09:00:00 +0000</pubDate><guid>https://www.javiercd.es/en/posts/virtualizacion-kvm-linux/almacenamiento-kvm/introduccion-almacenamiento-kvm/introduccion-almacenamiento-kvm/</guid><description>&lt;p&gt;Storage is a foundational part of virtualization: it determines how and where virtual machine disks are stored, how snapshots are handled, and what performance and protection options are available.&lt;/p&gt;
&lt;p&gt;In the KVM/libvirt ecosystem storage is organized around two basic concepts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Storage pools: logical groupings that represent a storage source (for example, a directory, an LVM volume group, an iSCSI target or a Ceph pool). Libvirt exposes and manages these pools to simplify storage usage for VMs.&lt;/li&gt;
&lt;li&gt;Storage volumes: the units inside a pool that act as virtual disks for guests.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="types-of-pools"&gt;Types of pools&lt;/h2&gt;
&lt;p&gt;Libvirt supports several pool types. A practical summary:&lt;/p&gt;</description></item><item><title>How to manage storage pools</title><link>https://www.javiercd.es/en/posts/virtualizacion-kvm-linux/almacenamiento-kvm/gestion-pools-almacenamiento/gestion-pools-almacenamiento/</link><pubDate>Sat, 25 Oct 2025 09:00:00 +0000</pubDate><guid>https://www.javiercd.es/en/posts/virtualizacion-kvm-linux/almacenamiento-kvm/gestion-pools-almacenamiento/gestion-pools-almacenamiento/</guid><description>&lt;p&gt;This post answers the following questions and provides practical examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What is a storage pool?&lt;/li&gt;
&lt;li&gt;How is a pool created and what forms can it take?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Storage in KVM/libvirt is organized using &amp;ldquo;storage pools&amp;rdquo; and &amp;ldquo;storage volumes&amp;rdquo;. In this article we explain what a pool is, why pools are used, and how to manage them with &lt;code&gt;virsh&lt;/code&gt; or XML definitions. We include examples, practical recommendations, and notes about LVM-based pools.&lt;/p&gt;</description></item><item><title>How to manage storage volumes with virsh</title><link>https://www.javiercd.es/en/posts/virtualizacion-kvm-linux/almacenamiento-kvm/gestion-volumenes-virsh/gestion-volumenes-virsh/</link><pubDate>Sat, 25 Oct 2025 09:00:00 +0000</pubDate><guid>https://www.javiercd.es/en/posts/virtualizacion-kvm-linux/almacenamiento-kvm/gestion-volumenes-virsh/gestion-volumenes-virsh/</guid><description>&lt;p&gt;Short: examples of using the libvirt API (&lt;code&gt;virsh vol-*&lt;/code&gt;) to manage volumes inside storage pools and notes about backend-specific behavior.&lt;/p&gt;
&lt;h2 id="managing-storage-volumes-with-virsh"&gt;Managing storage volumes with virsh&lt;/h2&gt;
&lt;p&gt;In this section we&amp;rsquo;ll look at storage volume management using libvirt&amp;rsquo;s API (the &lt;code&gt;virsh&lt;/code&gt; tool). We will use pools of type &lt;code&gt;dir&lt;/code&gt; (image files on disk), although many operations are applicable to other backends; differences are noted where relevant.&lt;/p&gt;
&lt;h3 id="pools-and-volumes-quick-concept"&gt;Pools and volumes: quick concept&lt;/h3&gt;
&lt;p&gt;A &amp;ldquo;volume&amp;rdquo; in libvirt is the storage unit created inside a pool. In &lt;code&gt;dir&lt;/code&gt; and &lt;code&gt;fs&lt;/code&gt; pools volumes are files (for example &lt;code&gt;qcow2&lt;/code&gt;, &lt;code&gt;raw&lt;/code&gt;); in &lt;code&gt;logical&lt;/code&gt; pools they are LVM logical volumes; in &lt;code&gt;disk&lt;/code&gt; pools they can map to partitions; and in networked backends (Gluster, RBD, iSCSI) creation and management may require backend-specific tools.&lt;/p&gt;</description></item><item><title>How to resize virtual machine disks</title><link>https://www.javiercd.es/en/posts/virtualizacion-kvm-linux/almacenamiento-kvm/redimension-discos-vms/redimension-discos-vms/</link><pubDate>Sat, 25 Oct 2025 09:00:00 +0000</pubDate><guid>https://www.javiercd.es/en/posts/virtualizacion-kvm-linux/almacenamiento-kvm/redimension-discos-vms/redimension-discos-vms/</guid><description>&lt;p&gt;In this example we&amp;rsquo;ll use the &lt;code&gt;default&lt;/code&gt; pool and a volume named &lt;code&gt;vdisk-10G.qcow2&lt;/code&gt;. We&amp;rsquo;ll show how to create the volume from the host, how to format it with common filesystems (ext4, FAT32, XFS, btrfs) from inside the guest, and finally how to add 10 GB to the volume and resize the partition and filesystem.&lt;/p&gt;
&lt;p&gt;Note: commands that manage volumes (create, resize) run on the host and use your prompt. Commands executed inside the guest (partitioning and formatting) are shown with the guest prompt &lt;code&gt;javiercruces@debian13:~$&lt;/code&gt;.&lt;/p&gt;</description></item></channel></rss>